apiVersion: source.toolkit.fluxcd.io/v1beta1
kind: HelmRepository
metadata:
  name: retool
  namespace: nicedishy
spec:
  interval: 1m
  url: https://charts.retool.com
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: retool
  namespace: nicedishy
spec:
  interval: 5m
  chart:
    spec:
      chart: retool
      version: '4.7.0'
      sourceRef:
        kind: HelmRepository
        name: retool
        namespace: nicedishy
      interval: 1m
  valuesFrom:
    - kind: ConfigMap
      name: retool-values
      valuesKey: values.yaml
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: retool-values
data:
  values.yaml: |
    # nameOverride:
    # fullNameOverride:
    config:
      licenseKeySecretName: retool-secrets
      licenseKeySecretKey: licenseId
      useInsecureCookies: false
      auth:
        google:
          clientId: 651914670974-ff8bg6p5it8758eldojg5u5thgc4crkl.apps.googleusercontent.com
          clientSecretSecretName: retool-secrets
          clientSecretSecretKey: clientSecret
      encryptionKey: not-a-key
      # encryptionKeySecretName is the name of the secret where the encryption key is stored (can be used instead of encryptionKey)
      # encryptionKeySecretName:
      # encryptionKeySecretKey is the key in the k8s secret, default: encryption-key
      # encryptionKeySecretKey:
      jwtSecret: not-a-secret
      # jwtSecretSecretName is the name of the secret where the jwt secret is stored (can be used instead of jwtSecret)
      # jwtSecretSecretName:
      # jwtSecretSecretKey is the key in the k8s secret, default: jwt-secret
      # jwtSecretSecretKey:
      postgresql: {}
        # Specify if postgresql subchart is disabled
        # host:
        # port:
        # db:
        # user:
        # password:
        # passwordSecretName is the name of the secret where the pg password is stored (can be used instead of password)
        # passwordSecretName:
        # passwordSecretKey is the key in the k8s secret, default: postgresql-password
        # passwordSecretKey:
    image:
      repository: "tryretool/backend"
      # Will default to Chart AppVersion if left empty
      tag: "2.68.20"
      pullPolicy: "IfNotPresent"
    commandline:
      args: []
    env: {}
    # Support for external secrets https://github.com/godaddy/kubernetes-external-secrets
    externalSecrets:
      enabled: false
      name: retool-config
    files: {}
    deployment:
      annotations: {}
    service:
      type: LoadBalancer
      externalPort: 80
      internalPort: 3000
      # externalIPs:
      # - 192.168.0.1
      #
      ## LoadBalancer IP if service.type is LoadBalancer
      # loadBalancerIP: 10.2.2.2
      annotations:
        service.beta.kubernetes.io/do-loadbalancer-name: "nicedishy-retool.mccode.dev"
        service.beta.kubernetes.io/do-loadbalancer-protocol: "http"
      labels: {}
      ## Limit load balancer source ips to list of CIDRs (where available)
      # loadBalancerSourceRanges: []
      selector: {}
      # portName: service-port
    ingress:
      enabled: false
      # For Kubernetes v1.14+, use 'networking.k8s.io/v1beta1'
      apiVersion: "extensions/v1beta1"
      labels: {}
      annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      # configures the hostname e.g. retool.example.com
      hostName:
      tls:
      # - secretName: retool.example.com
      #   hosts:
      #     - retool.example.com
      # servicePort: service-port
    postgresql:
      # We highly recommend you do NOT use this subchart as is to run Postgres in a container
      # for your production instance of Retool; it is a default. Please use a managed Postgres,
      # or self-host more permanantly. Use enabled: false and set in config above to do so.
      enabled: true
      ssl_enabled: false
      postgresqlDatabase: hammerhead_production
      postgresqlUsername: retool
      postgresqlPassword: retool
      service:
        port: 5432
      # Use the offical docker image rather than bitnami/docker
      # since Retool depends on the uuid-ossp extension
      image:
        repository: "postgres"
        # 10.6 is a default, please use 11.13+
        # see https://www.postgresql.org/support/versioning/
        tag: "10.6"
      postgresqlDataDir: "/data/pgdata"
      persistence:
        enabled: true
        mountPath: "/data/"
        size: 1Gi
    serviceAccount:
      # Specifies whether a service account should be created
      create: true
      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      # If set and create is false, the service account must be existing
      name:
      annotations: {}
    livenessProbe:
      enabled: true
      path: /api/checkHealth
      initialDelaySeconds: 30
      timeoutSeconds: 10
      failureThreshold: 3
    readinessProbe:
      enabled: true
      path: /api/checkHealth
      initialDelaySeconds: 30
      timeoutSeconds: 10
      periodSeconds: 10
      successThreshold: 5
    extraContainers: []
    extraVolumeMounts: []
    extraVolumes: []
    resources: {}
      # limits:
      #   cpu: 500m
      #   memory: 500Mi
      # requests:
      #   cpu: 500m
      #   memory: 500Mi
    priorityClassName: ""
    # Affinity for pod assignment
    # Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    # affinity: {}
    # Tolerations for pod assignment
    # Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    tolerations: []
    # Node labels for pod assignment
    # Ref: https://kubernetes.io/docs/user-guide/node-selection/
    nodeSelector: {}
    podAnnotations: {}
    # Increasing replica count will deploy a separate pod for backend and jobs
    # Example: with 3 replicas, you will end up with 3 backends + 1 jobs pod
    replicaCount: 1
    revisionHistoryLimit: 3
    # Optional pod disruption budget, for ensuring higher availability of the
    # Retool application.  Specify either minAvailable or maxUnavailable, as
    # either an integer pod count (1) or a string percentage ("50%").
    # Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
    #
    # Example:
    # podDisruptionBudget:
    #   maxUnavailable: 1
    # Custom labels for pod assignment
    podLabels: {}
    persistentVolumeClaim:
      # set to true to use pvc
      enabled: false
      # set to true to use you own pvc
      existingClaim: false
      annotations: {}
      accessModes:
        - ReadWriteOnce
      size: "15Gi"
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      ##
      # storageClass: "-"
    # default security context
    securityContext:
      enabled: false
      allowPrivilegeEscalation: false
      runAsUser: 1000
      fsGroup: 2000
    extraConfigMapMounts: []
    initContainers: {}
